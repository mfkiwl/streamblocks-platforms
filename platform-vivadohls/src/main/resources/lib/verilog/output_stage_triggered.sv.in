module @ACTOR@_triggered #(
	parameter integer C_M_AXI_ADDR_WIDTH = 64,
	parameter integer C_M_AXI_DATA_WIDTH = 32,
	parameter integer C_M_AXI_ID_WIDTH = 1,
	parameter integer C_M_AXI_AWUSER_WIDTH = 1,
	parameter integer C_M_AXI_ARUSER_WIDTH = 1,
	parameter integer C_M_AXI_WUSER_WIDTH = 1,
	parameter integer C_M_AXI_RUSER_WIDTH = 1,
	parameter integer C_M_AXI_BUSER_WIDTH =  1,
    parameter integer C_USER_DW = 32
)
(
	input wire ap_clk,
	input wire ap_rst_n,
	// -- ap control
	input  wire ap_start,
	output wire ap_idle,
	output wire ap_ready,
	output wire ap_done,
	output wire [31:0] ap_return,
	// -- write address channel
	output wire [C_M_AXI_ID_WIDTH-1:0]     m_axi_AWID,
	output wire [C_M_AXI_ADDR_WIDTH-1:0]   m_axi_AWADDR,
	output wire [7:0]                         m_axi_AWLEN,
	output wire [2:0]                         m_axi_AWSIZE,
	output wire [1:0]                         m_axi_AWBURST,
	output wire [1:0]                         m_axi_AWLOCK,
	output wire [3:0]                         m_axi_AWCACHE,
	output wire [2:0]                         m_axi_AWPROT,
	output wire [3:0]                         m_axi_AWQOS,
	output wire [3:0]                         m_axi_AWREGION,
	output wire [C_M_AXI_AWUSER_WIDTH-1:0] m_axi_AWUSER,
	output wire                               m_axi_AWVALID,
	input  wire                               m_axi_AWREADY,
	// -- write data channel
	output wire [C_M_AXI_ID_WIDTH-1:0]     m_axi_WID,
	output wire [C_M_AXI_DATA_WIDTH-1:0]   m_axi_WDATA,
	output wire [C_M_AXI_DATA_WIDTH/8-1:0] m_axi_WSTRB,
	output wire                               m_axi_WLAST,
	output wire [C_M_AXI_WUSER_WIDTH-1:0]  m_axi_WUSER,
	output wire                               m_axi_WVALID,
	input  wire                               m_axi_WREADY,
	// -- write response channel
	input  wire [C_M_AXI_ID_WIDTH-1:0]     m_axi_BID,
	input  wire [1:0]                         m_axi_BRESP,
	input  wire [C_M_AXI_BUSER_WIDTH-1:0]  m_axi_BUSER,
	input  wire                               m_axi_BVALID,
	output wire                               m_axi_BREADY,
	// -- read address channel
	output wire [C_M_AXI_ID_WIDTH-1:0]     m_axi_ARID,
	output wire [C_M_AXI_ADDR_WIDTH-1:0]   m_axi_ARADDR,
	output wire [7:0]                         m_axi_ARLEN,
	output wire [2:0]                         m_axi_ARSIZE,
	output wire [1:0]                         m_axi_ARBURST,
	output wire [1:0]                         m_axi_ARLOCK,
	output wire [3:0]                         m_axi_ARCACHE,
	output wire [2:0]                         m_axi_ARPROT,
	output wire [3:0]                         m_axi_ARQOS,
	output wire [3:0]                         m_axi_ARREGION,
	output wire [C_M_AXI_ARUSER_WIDTH-1:0] m_axi_ARUSER,
	output wire                               m_axi_ARVALID,
	input  wire                               m_axi_ARREADY,
	// -- read data channel
	input  wire [C_M_AXI_ID_WIDTH-1:0]     m_axi_RID,
	input  wire [C_M_AXI_DATA_WIDTH-1:0]   m_axi_RDATA,
	input  wire [1:0]                         m_axi_RRESP,
	input  wire                               m_axi_RLAST,
	input  wire [C_M_AXI_RUSER_WIDTH-1:0]  m_axi_RUSER,
	input  wire                               m_axi_RVALID,
	output wire                               m_axi_RREADY,
	// -- Pointer to DDR buffers
  input  wire [63:0] data_buffer,
  input  wire [63:0] meta_buffer,
  // -- circular buffer handles
	input  wire [31:0] alloc_size,
  input  wire [31:0] head,
  input  wire [31:0] tail,
  // -- Trigger signals
	input  wire all_sync_sleep,
	input  wire all_sleep,
	input  wire all_waited,
	output wire sleep,
	output wire sync_sleep,
	output wire waited,

	// -- input stream
	input    wire [C_USER_DW - 1:0] fifo_dout,
	input    wire fifo_empty_n,
	output   wire fifo_read,
	input    wire [31:0] fifo_count
);
  timeunit 1ps;
  timeprecision 1ps;
  // -- --------------------------------------------------------------------------
  // -- Reg & Wires
  // -- --------------------------------------------------------------------------

  // -- fifo count registers
  logic [31:0] fifo_count_reg = 32'd0;


  // -- output stage actor signals

  wire actor_start;
  wire actor_done;
  wire actor_ready;
  wire actor_idle;
  wire [31:0] actor_return;

  // -- meta fifo wires
  wire meta_empty_n;
  wire meta_full_n;
  wire meta_write;
  wire meta_read;
  wire meta_din;
  wire meta_dout;

  // -- fifo count sampling
  always_ff @(posedge ap_clk) begin
    if (ap_rst_n == 1'b0)
      fifo_count_reg <= 0;
    else if(actor_idle == 1'b1 || actor_done == 1'b1)
      fifo_count_reg <= fifo_count;
  end

	// --- offset FIFO
	FIFO #(
		.MEM_STYLE("auto"),
		.DATA_WIDTH(1),
		.ADDR_WIDTH(1)
  ) meta_fifo(
		.clk(ap_clk),
		.reset_n(ap_rst_n),
		.if_full_n(meta_full_n),
		.if_write(meta_write),
		.if_din(meta_din),

		.if_empty_n(meta_empty_n),
		.if_read(meta_read),
		.if_dout(meta_dout),

		.peek(),
		.count(),
		.size()
	);

	// -- Trigger instance

	Trigger  io_trigger (
		.ap_clk(ap_clk),
		.ap_rst_n(ap_rst_n),
    //-- start the trigger only after the token has been pushed to the meta fifo
		.ap_start(meta_empty_n),
		.ap_done(ap_done),
		.ap_idle(ap_idle),
		.ap_ready(ap_ready),
		.all_sleep(all_sleep),
		.all_sync_sleep(all_sync_sleep),
		.sleep(sleep),
		.sync_sleep(sync_sleep),
		.all_waited(all_waited),
		.waited(waited),
		.actor_return(actor_return[1:0]),
		.actor_done(actor_done),
		.actor_ready(actor_ready),
		.actor_idle(actor_idle),
		.actor_start(actor_start)
	);

	// -- Input stage instance

	@ACTOR@ #(
		.C_M_AXI_OCL_BUNDLE_ID_WIDTH( C_M_AXI_ID_WIDTH ),
		.C_M_AXI_OCL_BUNDLE_ADDR_WIDTH( C_M_AXI_ADDR_WIDTH ),
		.C_M_AXI_OCL_BUNDLE_DATA_WIDTH( C_M_AXI_DATA_WIDTH ),
		.C_M_AXI_OCL_BUNDLE_AWUSER_WIDTH( C_M_AXI_AWUSER_WIDTH ),
		.C_M_AXI_OCL_BUNDLE_ARUSER_WIDTH( C_M_AXI_ARUSER_WIDTH ),
		.C_M_AXI_OCL_BUNDLE_WUSER_WIDTH( C_M_AXI_WUSER_WIDTH ),
		.C_M_AXI_OCL_BUNDLE_RUSER_WIDTH( C_M_AXI_RUSER_WIDTH ),
		.C_M_AXI_OCL_BUNDLE_BUSER_WIDTH( C_M_AXI_BUSER_WIDTH )
	)
	instance_output_stage(
		.ap_clk(ap_clk),
		.ap_rst_n(ap_rst_n),
		.ap_start(actor_start),
		.ap_done(actor_done),
		.ap_idle(actor_idle),
		.ap_ready(actor_ready),
		.ap_return(actor_return),
		.m_axi_ocl_bundle_AWVALID(m_axi_AWVALID),
		.m_axi_ocl_bundle_AWREADY(m_axi_AWREADY),
		.m_axi_ocl_bundle_AWADDR(m_axi_AWADDR),
		.m_axi_ocl_bundle_AWID(m_axi_AWID),
		.m_axi_ocl_bundle_AWLEN(m_axi_AWLEN),
		.m_axi_ocl_bundle_AWSIZE(m_axi_AWSIZE),
		.m_axi_ocl_bundle_AWBURST(m_axi_AWBURST),
		.m_axi_ocl_bundle_AWLOCK(m_axi_AWLOCK),
		.m_axi_ocl_bundle_AWCACHE(m_axi_AWCACHE),
		.m_axi_ocl_bundle_AWPROT(m_axi_AWPROT),
		.m_axi_ocl_bundle_AWQOS(m_axi_AWQOS),
		.m_axi_ocl_bundle_AWREGION(m_axi_AWREGION),
		.m_axi_ocl_bundle_AWUSER(m_axi_AWUSER),
		.m_axi_ocl_bundle_WVALID(m_axi_WVALID),
		.m_axi_ocl_bundle_WREADY(m_axi_WREADY),
		.m_axi_ocl_bundle_WDATA(m_axi_WDATA),
		.m_axi_ocl_bundle_WSTRB(m_axi_WSTRB),
		.m_axi_ocl_bundle_WLAST(m_axi_WLAST),
		.m_axi_ocl_bundle_WID(m_axi_WID),
		.m_axi_ocl_bundle_WUSER(m_axi_WUSER),
		.m_axi_ocl_bundle_ARVALID(m_axi_ARVALID),
		.m_axi_ocl_bundle_ARREADY(m_axi_ARREADY),
		.m_axi_ocl_bundle_ARADDR(m_axi_ARADDR),
		.m_axi_ocl_bundle_ARID(m_axi_ARID),
		.m_axi_ocl_bundle_ARLEN(m_axi_ARLEN),
		.m_axi_ocl_bundle_ARSIZE(m_axi_ARSIZE),
		.m_axi_ocl_bundle_ARBURST(m_axi_ARBURST),
		.m_axi_ocl_bundle_ARLOCK(m_axi_ARLOCK),
		.m_axi_ocl_bundle_ARCACHE(m_axi_ARCACHE),
		.m_axi_ocl_bundle_ARPROT(m_axi_ARPROT),
		.m_axi_ocl_bundle_ARQOS(m_axi_ARQOS),
		.m_axi_ocl_bundle_ARREGION(m_axi_ARREGION),
		.m_axi_ocl_bundle_ARUSER(m_axi_ARUSER),
		.m_axi_ocl_bundle_RVALID(m_axi_RVALID),
		.m_axi_ocl_bundle_RREADY(m_axi_RREADY),
		.m_axi_ocl_bundle_RDATA(m_axi_RDATA),
		.m_axi_ocl_bundle_RLAST(m_axi_RLAST),
		.m_axi_ocl_bundle_RID(m_axi_RID),
		.m_axi_ocl_bundle_RUSER(m_axi_RUSER),
		.m_axi_ocl_bundle_RRESP(m_axi_RRESP),
		.m_axi_ocl_bundle_BVALID(m_axi_BVALID),
		.m_axi_ocl_bundle_BREADY(m_axi_BREADY),
		.m_axi_ocl_bundle_BRESP(m_axi_BRESP),
		.m_axi_ocl_bundle_BID(m_axi_BID),
		.m_axi_ocl_bundle_BUSER(m_axi_BUSER),

		.ocl_buffer_data_buffer(data_buffer),
		.ocl_buffer_meta_buffer(meta_buffer),
		.ocl_buffer_alloc_size(alloc_size),
		.ocl_buffer_head(head),
    .ocl_buffer_tail(tail),

    .fifo_count(fifo_count_reg),

		.data_stream_V_dout(fifo_dout),
		.data_stream_V_empty_n(fifo_empty_n),
		.data_stream_V_read(fifo_read),
		.meta_stream_V_dout(meta_dout),
		.meta_stream_V_empty_n(meta_empty_n),
		.meta_stream_V_read(meta_read)
	);

  // -- meta fifo (initialization) logic
	assign meta_write = ap_start;
	assign meta_din = 1'b1;

endmodule
